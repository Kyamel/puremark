// PureMark Copyright 2025. All rights reserved.
// Distributed under the AGPLv3+ license. See LICENSE file for details.
//
// This file is autogenerated based on the C file:
// C:\Users\lucas\dev\crossplatform\puremark\src\render\add.c
// Do not modify manually. Any modifications to the original C file will
// require regeneration of this file.

        
import 'dart:ffi';
import 'package:ffi/ffi.dart' as adv; // For Pointer and Dynamic memory allocation.
final dylib = DynamicLibrary.open('lib/autogen/native_libraries/windows/pmrender.dll');

// Typedef for addInt
typedef AddintFunc = Int32 Function(Int32, Int32);
typedef Addint = int Function(int, int);
// Loads addInt function
final Addint addInt = dylib.lookupFunction<AddintFunc, Addint>(
  'addInt',
);

// Typedef for multiplyDouble
typedef MultiplydoubleFunc = Double Function(Double, Double);
typedef Multiplydouble = double Function(double, double);
// Loads multiplyDouble function
final Multiplydouble multiplyDouble = dylib.lookupFunction<MultiplydoubleFunc, Multiplydouble>(
  'multiplyDouble',
);


// Typedefs para a função change_state
typedef ChangeStateFunc = Void Function();
typedef ChangeState = void Function(); // Corrigido para void em vez de dynamic

// Carregar a função change_state
final ChangeState changeState = dylib.lookupFunction<ChangeStateFunc, ChangeState>(
  'change_state',
);

// Typedefs para a função getSomeStructure
typedef GetSomeStructureFunc = Pointer<adv.Utf8> Function();
typedef GetSomeStructure = Pointer<adv.Utf8> Function();

// Carregar a função getSomeStructure
final GetSomeStructure getSomeStructure = dylib.lookupFunction<GetSomeStructureFunc, GetSomeStructure>(
  'getSomeStructure',
);

typedef FreeSomeStructureFunc = Void Function(Pointer<adv.Utf8> someStructure);
typedef FreeSomeStructure = void Function(Pointer<adv.Utf8> someStructure);

// Carregar a função freeSomeStructure
final FreeSomeStructure freeSomeStructure = dylib.lookupFunction<FreeSomeStructureFunc, FreeSomeStructure>(
  'freeSomeStructure',
);